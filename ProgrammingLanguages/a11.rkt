#lang racket
(require "mk.rkt")

(define apply-Go
  (lambda (G e t)
    (fresh (a G^)
      (== `(,a . ,G^) G)
      (fresh (aa da)
        (== `(,aa . ,da) a)
        (conde
          ((== aa e) (== da t))
          ((=/= aa e) (apply-Go G^ e t)))))))

(define !-
  (lambda (G e t)
    (conde
      ((numbero e) (== 'Nat t))
      ((== t 'Bool)
       (conde
         ((== #t e))
         ((== #f e))))
      ((fresh (n)
              (== `(zero? ,n) e)
              (== t 'Bool)
              (!- G n 'Nat)))
      ((fresh (n)
              (== `(sub1 ,n) e)
              (== t 'Nat)
              (!- G n 'Nat)))
      ((fresh (test)
              (== `(not ,test) e)
              (== t 'Bool)
              (!- G test t)))
      ((fresh (var body)
              (== `(fix (lambda (,var) ,body)) e)
              (symbolo var)
              (fresh (var2)
                     (== var2 t)
                     (!- `((,var . ,var2) . ,G) body var2))))
      ((fresh (ne1 ne2)
         (== `(+ ,ne1 ,ne2) e)
         (== 'Nat t)
         (!- G ne1 'Nat)
         (!- G ne2 'Nat)))
      ((fresh (ne1 ne2)
              (== `(* ,ne1 ,ne2) e)
              (== 'Nat t)
              (!- G ne1 'Nat)
              (!- G ne2 'Nat)))
      ((fresh (a d)
              (==`(cons ,a ,d) e)
              (fresh (p1 p2)
                     (== `(pairof ,p1 ,p2) t)
                     (!- G a p1)
                     (!- G d p2))))
      ((fresh (a)
              (== `(car ,a) e)
              (fresh (t2)
                     (== 'Nat t)
                     (!- G a `(pairof Nat ,t)))))
      ((fresh (a)
              (== `(car ,a) e)
              (== 'Bool t)
              (!- G a t)))
      ((fresh (d)
              (== `(cdr ,d) e)
              (fresh (num)
                     (== 'Nat t)
                     (!- G d `(pairof ,num Nat)))))
      ((fresh (teste anse elsee)
        (== `(if ,teste ,anse ,elsee) e)
        (!- G teste 'Bool)
        (!- G anse t)
        (!- G elsee t)))
      ((symbolo e) (apply-Go G e t))
      ((fresh (x b)
        (== `(lambda (,x) ,b) e)
        (symbolo x)
        (fresh (tx tb)          
          (== `(,tx -> ,tb) t)
          (!- `((,x . ,tx) . ,G) b tb))))
      ((fresh (e1 arg)
        (== `(,e1 ,arg) e)
        (fresh (targ)
          (!- G e1 `(,targ -> ,t))
          (!- G arg targ)))))))


;cannot get this example to work???
(run* (t) (!- '() '((lambda (x) (car x)) (cons (cons 0 0) #f)) t)) 
;((pairof Nat Nat))
