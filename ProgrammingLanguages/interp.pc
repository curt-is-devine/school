;#lang racket

;(require "parenthec.rkt")

(define-registers expression* env* k* v* y* rator* a*)
(define-program-counter pc)

(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-label apply-env
  (union-case env* envr
      [(empty-env) (error 'value-of "unbound identifier")]
      [(extend-env a^ env^) (if (zero? y*) (begin (set! v* a^)
                                                  (apply-k)) (begin (set! env* env^)
                                                                    (set! y* (sub1 y*))
                                                                    (apply-env)))]))

(define-union envr
  (empty-env)
  (extend-env a^ env^))


(define-label apply-closure
  (union-case rator* clos
      [(make-closure body env) (begin (set! expression* body)
                                      (set! env* (envr_extend-env a* env))
                                      (value-of-cps))]))

(define-union clos
  (make-closure body env))

(define-union kt
  (empty-k dismount)
  (in-mult-k o k)
  (out-mult-k x2 env k)
  (sub1-k k)
  (zero-k k)
  (if-k conseq alt env k)
  (rand-k c k)
  (rator-k rand env k)
  (throw-in-k t)
  (throw-out-k k-exp env)
  (let-k body env k))

(define-label apply-k
  (union-case k* kt
      [(empty-k dismount) (dismount-trampoline dismount)]
      [(in-mult-k o k^) (begin (set! k* k^)
                               (set! v* (* o v*))
                               (set! pc apply-k))]
      [(out-mult-k x2 env k^) (begin (set! expression* x2)
                                     (set! k* (kt_in-mult-k v* k^))
                                     (set! pc value-of-cps))]
      [(sub1-k k^) (begin (set! k* k^)
                          (set! v* (sub1 v*))
                          (set! pc apply-k))]
      [(zero-k k^) (begin (set! k* k^)
                          (set! v* (zero? v*))
                          (set! pc apply-k))]
      [(if-k conseq alt env k^) (if v* (begin (set! expression* conseq)
                                              (set! env* env)
                                              (set! k* k^)
                                              (set! pc value-of-cps)) (begin (set! expression* alt)
                                                                     (set! k* k^)
                                                                     (set! env* env)
                                                                     (set! pc value-of-cps)))]
      [(let-k body env k^) (begin (set! expression* body)
                                  (set! env* (envr_extend-env v* env))
                                  (set! k* k^)
                                  (set! pc value-of-cps))]
      [(throw-in-k t) (begin (set! k* t)
                             (set! pc apply-k))]
      [(throw-out-k k-exp env) (begin (set! expression* k-exp)
                                      (set! env* env)
                                      (set! k* (kt_throw-in-k v*))
                                      (set! pc value-of-cps))]
      [(rand-k c k^) (begin (set! rator* c)
                            (set! a* v*)
                            (set! k* k^)
                            (set! pc apply-closure))]
      [(rator-k rand env k^) (begin (set! expression* rand)
                                    (set! env* env)
                                    (set! k* (kt_rand-k v* k^))
                                    (set! pc value-of-cps))]))
    
(define-label value-of-cps
  (union-case expression* expr
      [(const cexp) (begin (set! v* cexp)
                           (set! pc apply-k))]
      [(mult nexp1 nexp2) (begin (set! expression* nexp1)
                                 (set! k* (kt_out-mult-k nexp2 env* k*))
                                 (set! pc value-of-cps))]
      [(sub1 nexp) (begin (set! expression* nexp)
                          (set! k* (kt_sub1-k k*))
                          (set! pc value-of-cps))]
      [(zero nexp) (begin (set! expression* nexp)
                          (set! k* (kt_zero-k k*))
                          (set! pc value-of-cps))]
      [(if test conseq alt) (begin (set! expression* test)
                                   (set! k* (kt_if-k conseq alt env* k*))
                                   (set! pc value-of-cps))]
      [(letcc body) (begin (set! expression* body)
                           (set! env* (envr_extend-env k* env*))
                           (set! pc value-of-cps))]
      [(throw kexp vexp) (begin (set! expression* kexp)
                                (set! k* (kt_throw-out-k vexp env*))
                                (set! pc value-of-cps))]
      [(let exp body) (begin (set! expression* exp)
                             (set! k* (kt_let-k body env* k*))
                             (set! pc value-of-cps))]
      [(var n) (begin (set! y* n)
                      (set! pc apply-env))]
      [(lambda body) (begin (set! v* (clos_make-closure body env*))
                            (set! pc apply-k))]
      [(app rator rand) (begin (set! expression* rator)
                               (set! k* (kt_rator-k rand env* k*))
                               (set! pc value-of-cps))]))

(define-label main 
  (begin (set! expression* (expr_let 
                           (expr_lambda
                            (expr_lambda 
                             (expr_if
                              (expr_zero (expr_var 0))
                              (expr_const 1)
                              (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
                           (expr_mult
                            (expr_letcc
                             (expr_app
                              (expr_app (expr_var 1) (expr_var 1))
                              (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
                            (expr_const 5))))
         (set! env* (envr_empty-env))
         (set! pc value-of-cps)
         (mount-trampoline kt_empty-k k* pc)
         (printf "Fact 5: ~s\n" v*)))
  
;(main)